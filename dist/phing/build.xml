<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="F:\VBox Machines\DebianShare\phing-grammar.rng"
            type="application/xml"
            schematypens="http://relaxng.org/ns/structure/1.0" ?>
<project name="AjaXplorer" default="build">

    <property file="build.properties"/>
    <property name="env" value="testing"/>
    <property name="skip_deploy" value="false"/>
    <property name="build.source_folder" value="${build.working_folder}/source"/>
    <property name="svn.local_folder" value="${build.working_folder}/svnwc"/>
    <taskdef classname="lib.AjxpPluginDiscriminate" name="plugindiscriminate"/>
    <taskdef classname="lib.AjxpSvnSummarizeTask" name="svn_summarize"/>
    <taskdef classname="lib.AjxpParseSvnSummarize" name="parse_svn_summarize"/>


    <target name="build" description="Main sequence">
        <if>
        	<equals arg1="${env}" arg2="release"/>        	
        	<then>
		        <phingcall target="prepare_upgrade"/>
		        <phingcall target="zip_upgrade"/>
		        <if>
		        	<equals arg1="${skip_deploy}" arg2="false"/>
		        	<then>
		        		<phingcall target="deploy_upgrade"/>
		        	</then>
		        </if>
        	</then>
        	<else>
        	     <phingcall target="prepare"/>
        	</else>
        </if>
        <phingcall target="zip"/>
        <if>
        	<equals arg1="${skip_deploy}" arg2="false"/>
        	<then>
		        <phingcall target="deploy"/>
		        <phingcall target="clean"/>
		    </then>
		</if>
    </target>

    <target name="usage" description="Describe this script usage">
        <echo message="For releasing : phing -Denv=release -DskipDeploy=true -Dprevious_revision=2861 -Dprevious_version=4.0.4 -Dnew_version=4.2.0"/>
    </target>

    <target name="deploy" description="Send package to FTP">
        <phingcall target="ftp_deploy">
            <property name="base_folder" value="${build.working_folder}/build"/>
            <property name="remote_folder" value="${ftp.dir}"/>
        </phingcall>
        <phingcall target="ftp_deploy">
            <property name="base_folder" value="${build.working_folder}/build/plugins"/>
            <property name="remote_folder" value="${ftp.dir}/plugins"/>
        </phingcall>
    </target>
    
    <target name="deploy_upgrade" description="Send package to FTP">
        <phingcall target="ftp_deploy">
            <property name="base_folder" value="${build.working_folder}/build/upgrade"/>
            <property name="remote_folder" value="${ftp.update_dir}"/>
        </phingcall>
    </target>
        

    <target name="svn_update" description="Checkout or update depending on working-copy presence.">
        <if>
            <available type="dir" file="${svn.local_folder}"/>
            <then>
                <svnupdate
                        revision="HEAD"
                        repositoryurl="${svn.repository_url}"
                        todir="${svn.local_folder}"
                />
            </then>
            <else>
                <mkdir dir="${svn.local_folder}"/>
                <svncheckout
                        revision="HEAD"
                        repositoryurl="${svn.repository_url}"
                        todir="${svn.local_folder}"
                />
            </else>
        </if>
    </target>

    <target name="prepare" description="Export SVN, prepare VERSION and discriminate plugins">
        <if>
            <not><available type="dir" file="${svn.local_folder}"/></not>
            <then>
                <phingcall target="svn_update"/>
            </then>
        </if>
        <if>
            <not><available type="dir" file="${build.source_folder}"/></not>
            <then><mkdir dir="${build.source_folder}"/></then>
        </if>
        <tstamp>
            <format property="VERSION_DATE" pattern="%Y-%m-%d"/>
        </tstamp>
        <svnlastrevision workingcopy="${svn.local_folder}" propertyname="SVN_LASTREVISION"/>
        <if>
        	<equals arg1="${env}" arg2="testing"/>        	
        	<then>
        		<property name="package_name" value="ajaxplorer-${DSTAMP}-${SVN_LASTREVISION}"/>
        	</then>
        	<else>
        		<property name="package_name" value="ajaxplorer-core-${new_version}"/>
        	</else>
        </if>
        <property name="INNER_DIRECTORY" value="${build.source_folder}/${package_name}"/>
        <if>
            <available type="dir" file="${INNER_DIRECTORY}"/>
            <then>
                <delete dir="${INNER_DIRECTORY}"/>
            </then>
        </if>
        <!-- EXPORT SVN -->
        <svnexport
                repositoryurl="${svn.local_folder}"
                todir="${INNER_DIRECTORY}"
                revision=""
                />
        <!-- PREPARE VERSION FILE -->
        <move file="${INNER_DIRECTORY}/conf/VERSION.tpl" tofile="${INNER_DIRECTORY}/conf/VERSION" overwrite="true">
            <filterchain>
                <replacetokens begintoken="##" endtoken="##">
                    <token key="VERSION_NUMBER" value="${build.version}"/>
                    <token key="VERSION_DATE" value="${VERSION_DATE}"/>
                    <token key="REVISION" value="${SVN_LASTREVISION}"/>
                </replacetokens>
            </filterchain>
        </move>
        <!-- DISCRIMINATE PLUGINS -->
        <mkdir dir="${build.working_folder}/ext_plugins" />
        <plugindiscriminate all="${INNER_DIRECTORY}/plugins" ext="${build.working_folder}/ext_plugins"/>		
    </target>

    <target name="prepare_upgrade" description="Building upgrade package" depends="prepare">
        <if>
            <not><available type="dir" file="${build.working_folder}/upgrade"/></not>
            <then><mkdir dir="${build.working_folder}/upgrade"/></then>
        </if>
    	<property name="upgrade_export" value="${build.working_folder}/upgrade/export/ajaxplorer-core-upgrade-${previous_version}-${new_version}"/>
    	<svn_summarize
    	 revision1="${previous_revision}"
    	 revision2="${SVN_LASTREVISION}"
    	 summarizeFile="${build.working_folder}/upgrade/svn_summarize"
    	 repositoryurl="${svn.local_folder}"
    	 />
    	 <parse_svn_summarize
    	 	summarizeFile="${build.working_folder}/upgrade/svn_summarize"
    	 	sourceDir="${svn.local_folder}"
    	 	upgradeDir="${upgrade_export}"
    	 	extPluginsFolder="${build.working_folder}/ext_plugins"
    	 />
		<copy file="${INNER_DIRECTORY}/conf/VERSION" tofile="${upgrade_export}/conf/VERSION" overwrite="true"/>
    </target>
    
    <target name="zip" description="Package as Zip archive">
        <mkdir dir="${build.working_folder}/build" />
        <mkdir dir="${build.working_folder}/build/plugins" />
        <tstamp/>
        <svnlastrevision workingcopy="${svn.local_folder}" propertyname="SVN_LASTREVISION"/>
        <if>
        	<equals arg1="${env}" arg2="testing"/>        	
        	<then>
        		<property name="package_name" value="ajaxplorer-${DSTAMP}-${SVN_LASTREVISION}"/>
        	</then>
        	<else>
        		<property name="package_name" value="ajaxplorer-core-${new_version}"/>
        	</else>
        </if>        
        <property name="packaged_zip" value="${package_name}.zip"/>
        <property name="packaged_tar" value="${package_name}.tar.gz"/>
        <zip
                basedir="${build.source_folder}"
                destfile="${build.working_folder}/build/${packaged_zip}"
                includeemptydirs="true"
                />
        <tar
                basedir="${build.source_folder}"
                destfile="${build.working_folder}/build/${packaged_tar}"
                includeemptydirs="true"
                compression="gzip"
            />
        <phingcall target="build_external_plugins"/>
    </target>
    
    <target name="zip_upgrade" description="Packaging upgrade">
        <mkdir dir="${build.working_folder}/build" />
        <mkdir dir="${build.working_folder}/build/upgrade" />
        <property name="packaged_zip" value="ajaxplorer-core-upgrade-${previous_version}-${new_version}.zip"/>
        <zip
                basedir="${build.working_folder}/upgrade/export/"
                destfile="${build.working_folder}/build/upgrade/${packaged_zip}"
                includeemptydirs="true"
                />
    </target>

    <target name="build_external_plugins">
        <foreach param="filename" absparam="absfilename" target="zip_plugin">
            <fileset dir="${build.working_folder}/ext_plugins">
                <include name="*.*"/>
            </fileset>
        </foreach>
    </target>

    <target name="zip_plugin" >
        <tstamp/>
        <property name="packaged_plugin" value="plugin-${filename}-${DSTAMP}.zip"/>
        <property name="packaged_plugin_tar" value="plugin-${filename}-${DSTAMP}.tar.gz"/>
        <zip
                basedir="${absfilename}"
                destfile="${build.working_folder}/build/plugins/${packaged_plugin}"
                includeemptydirs="true"
        />
        <tar
                basedir="${absfilename}"
                destfile="${build.working_folder}/build/plugins/${packaged_plugin_tar}"
                includeemptydirs="true"
                compression="gzip"
        />
    </target>

    <target name="clean" description="Clean all working folders">
        <foreach list="${build.source_folder},${svn.local_folder},${build.working_folder}/build,${build.working_folder}/ext_plugins,${build.working_folder}/upgrade" param="filename" absparam="absfilename" target="delete_me">
        </foreach>
    </target>
    <target name="delete_me">
        <if>
            <available file="${filename}"/>
            <then>
                <delete dir="${filename}"/>
            </then>
            <elseif>
                <available file="${absfilename}"/>
                <then>
                    <delete file="${absfilename}"/>
                </then>
            </elseif>
        </if>
    </target>

    <!-- GENERIC TASKS -->
    <target name="ftp_deploy" description="Generic FTP deployment">
        <ftpdeploy
          host="${ftp.host}"
          port="${ftp.port}"
          username="${ftp.username}"
          password="${ftp.password}"
          passive="${ftp.passive}"
          dir="${remote_folder}">
          <fileset dir="${base_folder}">
              <include name="*.zip"/>
              <include name="*.tar.gz"/>
          </fileset>
        </ftpdeploy>
        <echo message="Successfully sent zip and tars from ${base_folder} to ${ftp.host}/${remote_folder}"/>
    </target>

    <target name="lint" description="Check syntax of sources">
        <phplint>
            <fileset dir="${build.source_folder}">
                <include name="**/*.php"/>
            </fileset>
        </phplint>
    </target>

</project>
